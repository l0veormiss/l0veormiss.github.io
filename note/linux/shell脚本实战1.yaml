1.1获取随机8位字符串:
#方法1
echo $RANDOM | md5sum | cut -c 1-8  #471b94f2

#方法2
openssl rand -base64 4  #vg3BEg==

#方法3
cat /proc/sys/kernel/random/uuid | cut -c 1-8  #ed9e032c

1.2获取随机8位数字:
#方法1
echo $RANDOM | cksum | cut -c 1-8  #23648321
#cksum：打印CRC效验和统计字节

#方法2
openssl rand -base64 4 | cksum | cut -c 1-8 #38571131

#方法3
date +%N | cut -c 1-8  #69024815

2.定义一个颜色输出字符串函数:
#方法1
function echo_color(){
    if [ $1 == "green" ];then
        echo -e "\033[32;40m$2\033[0m"  #格式化输出字体 绿色
    elif [ $1 == "red" ];then
        echo -e "\033[31;40m$2\033[0m"  #格式化输出字体 红色 
    fi

}

#方法2
function echo_color(){
    case $1 in
        green)
            echo -e "\033[32;40m$2\033[0m"
        red)
            echo -e "\033[31;40m$2\033[0m"
        *)
            echo "Example： echo_color red string"
    easc
}
#使用方法:   echo_color green "test"

3.批量创建用户:
#!/bin/bash
DATE=$(date +%F_%T) # 2022-11-07_10:16:05
USER_FILE=user.txt #用户列表文件
echo_color(){ #打印色彩
    if [ $1=="green" ];then
        echo =e "\033[032;40m$2\033[0m"  
    elif [ $1=="red" ];then
        echo -e "\033[031;40m$2\033[0m"
    fi
}
#如果用户文件存在并且大于0就备份
if [ -s $USER_FILE ];then  #-e 判断文件是否存在  -s判断文件存在并且还判断不为空  
    mv $USER_FILE ${USER_FILE}-${DATE}.bak
    echo_color green "$USER_FILE has been exist,rename ${USER_FILE}-${DATE}.bak" #日期时间格式备份文件
fi
echo -e "User\tPassword" >> $USER_FILE
echo "---------------------" >> $USER_FILE
for USER in user{1..10};do  #循环生成 user1-user10
    if ! id $USER &>/dev/null;then  #标准输出 标准错误都重定向到空
        PASS=$(echo $RANDOM | md5sum | cut -c 1-8) #将后面的表达式存储到 $PASS 变量
        useradd $USER  #添加用户
        echo $PASS | passwd --stdin $USER &>/dev/null  #将密码输入到 passwd
        echo -e "$USER\t$PASS >> $USER_FILE"   #格式化输出 用户名 密码 追加到 用户文件
        echo "[+] $USER User create successful..."
    else
        echo_color red "[-] $USER User already exists..."
    fi
done

4.检查软件包是否安装:
#!/bin/bash
if rpm -q nmap &>/dev/null;then
    echo "yes"
else
    echo "no"
fi

5.检查服务状态:
#!/bin/bash
PORT_C=$(ss -anu | grep -c 123)
PS_C=$(ps -ef | grep ntpd | grep -vc grep)
if [$PORT_C -eq 0 -o $PS_C -eq 0];then   # -a = &&    -o = ||
    echo "内容" | mail -s "主题 " momoda@qq.com  #将检测结果 通过邮件发送
fi

6.检查主机存活状态:
方法1：将错误IP放到数组里面判断是否ping失败三次
#!/bin/bash
IP_LIST="192.168.1.2 192.168.1.3 192.168.1.4"
for IP in IP_LIST;do
    NUM=1
    while [ $NUM -le 3 ];do
        if ping -c 1 $IP > /dev/null;then
            echo "$IP ping is successful..."
            break
        else
            FAIL_COUNT[$NUM]=$IP
            let $NUM++
        fi
    done
    if [ $FAIL_COUNT[*] -eq 3 ];then
        echo "$FAIL_COUNT[1] ping is failure..."
        unset FAIL_COUNT[*]
    fi
done

7.1CPU监控信息:
#!/bin/bsh
DATE=$(date +%F" "%H:%M)
FILE=cpu.txt
IP=$(ifconfig eth0 | awk -F '[ :]+' '/inet addr/{print $4}')  #只支持CentOS6
MAIL="momoda@qq.com"
if ! which vmstat &>/dev/null;then
    echo "vmstat command no found,Please install procps package..."
    exit 1
fi
US=$(vmstat | awk 'NR==3{print $13}')
SY=$(vmstat | awk 'NR==3{print $14}')
IDLE=$(vmstat | awk 'NR==3{print $15}')
WAIT=$(vmstat | awk 'NR==3{print $16}')
USE=$(($US+$SY))
if [ $USE -ge 50 ];then
    echo "Date： $DATE" >> $FILE
    echo "Host： $IP" >> $FILE
    eecho "Problem： CPU utilization $USE" >> $FILE
    echo -e "US\tSY\tIDLE\tWAIT" >> $FILE
    echo "--------------------------------"
    echo -e "$US\t$SY\t$IDLE\t$WAIT" >> $FILE
    echo -e "\n" >> $FILE
fi

7.2内存监控信息:
#!/bin/bash
DATE=$(date +%F" "%H:%M)
MEM_FILE=memory.txt
IP=$(ifconfig eth0 | awk -F '[ :]+' '/inet addr/{print $4}')
MAIL="momoda@qq.com"
TOTAL=$(free -m | awk '/Mem/print $2{}')
USE=$(free -m | awk '/Mem/{print $3-$6-$7}')
FREE=$(($TOTAL-$USE))
if [ $FREE -lt 1024 ];then
    echo "Date： $DATE"
    echo "Host： $IP"
    echo -e "FREE\tUSE\tTOTAL"
    echo "-----------------------------"
    echo -e "$FREE\t$USE\t$TOTAL"
    echo -e "\n"
fi

7.3硬盘监控信息:
#!/bin/bash
DATE=$(date +%F" "%H:%M)
IP=$(ifconfig eth0 | awk -F '[ :]+' '/inet addr/{print $4}')
MAIL=momoda@qq.com
TOTAL=$(fdisk -l | awk -F '[ :]+' 'BEGIN{OFS="="}/^Disk \dev/{printf "%s=%sG,",$2,$3}')
PATH_USE=$(df -h | awk 'BEGIN{OFS="="}/^\/dev/{print $1,int($5),$6}')
for i in $PATH_USE;do
    PATH=$(echo $i | cut -d "=" -f 1)
    USE=$(echo $i | cut -d "=" -f 2)
    MOUNT=$(echo $i | cut -d "=" -f 3)
    if [ $USE -gt 80 ];then
        echo "Date： $DATE"
        echo "Host： $IP"
        echo "Total： $TOTAL"
        echo -e "PATH\tUSE\tMOUNT"
        echo "----------------------------"
        echo -e "$PATH\t$USE\t$MOUNT"
        echo -e "\n"
    fi
done

8.批量监控主机磁盘利用率:
#前提监控端和被监控端SSH免交互登录或者密钥登录。
#写一个配置文件保存被监控主机SSH连接信息，文件内容格式：IP User Port
#!/bin/bash
HOST_INFO=host.txt
for IP in $(awk '/^[^#]/{print $1}',$HOST_INFO);do
    USER=$(awk -v ip=$IP 'ip==$1{print $2}',$HOST_INFO)
    PORT=$(awk -v ip=$IP 'IP==$1{print $3}',$HOST_INFO)
    TMP_FILE=/tmp/disk.tmp
    ssh -p $PORT $USER@$IP 'df -h ' > $TMP_FILE
    USE_RATE_LIST=$(awk 'BEGIN{OFS="="}/^\/dev/{print $1,int($5)}',$HOST_INFO)
    for USE_RATE in $USE_RATE_LIST;do
        PATH_NAME=${USE_DATE%=*} 
        USE_DATE=$(USE_RATE*=)
        if [ $USE_RATE -ge 80 ];then
            echo "Warning:$PATH]PATH_NAME Parttion usage $USE_RATE"
        fi
    done
done

9.检查网站可用性:
1）检查URL可用性
#!/bin/bash
#方法1
check_url(){
    HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w "%{http_code}" $1)
    if [ $HTTP_CODE -ne 200 ];then
        echo "Warning $1,Access failure..."
    fi
}

#方法2
check_url(){
    if ! wget -T 10 --tries=1 --spider $1 > /dev/null 2>&1;then
        echo "Warning $1,Access failure..."
    fi
}
#使用方法： check_url www.baidu.com

2）判断三次URL可用性
# 方法1：利用循环技巧，如果成功就跳出当前循环，否则执行最后一行
#!/bin/bash
check_url(){
    HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w "%{http_code}" $1)
    if [ $HTTP_CODE -eq 200 ];then
        continue
    fi
}
URL_LIST="WWW.baidu.com www.qq.com"
for URL in $URL_LIST;do
    check_url $URL
    check_url $URL
    check_url $URL
    echo "Warning $URL,Access failure..."
done

#方法2
#!/bin/bash
URL_LIST="www.baidu.com www.qq.com"
for URL in $URL_LIST;do

    FAIL_COUNT=0
    for ((i=0;i<3;i++));do
        HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w "%{http_code}" $1)
        if [ $HTTP_CODE -ne 200 ];then
            let FAIL_COUNT++
        else
            break
        fi
    done
    if [ $FAIL_COUNT -eq 3 ];then
        echo "Warning $URL,Access failure..."
    fi
done

10.检查mysql主从同步状态:
#!/bin/bash
USER=bak
PASSWD=123456
IO_SQL_STATUS=$(mysql -u $USER -p $PASSWD -e 'show slave status\G' | awk -F '/Slave_.*_Running/{gsub(": ",":");print $0}')
for i in $IO_SQL_STATUS;do
    THREAD_STATUS_NAME=${i%:*}
    THREAD_STATUS=${i#*:}
    if [ "$THREAD_STATUS" != "Yes" ];then
        echo "Error： Mysql Master-Slave $THREAD_STATUS_NAME status is $THREAD_STATUS ..."
    fi
done




























