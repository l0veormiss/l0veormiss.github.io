curl -sSL https://get.docker.com/ | sh 
#下载docker 然后执行sh命令 运行脚本

docker ps
#查看正在运行的进程

docker ps -a
#查看所有容器  包括停止的

docker images
#查看目前运行的镜像

docker search redis
#搜索redis相关镜像

docker search redis --filter=stars=3000
#查找stars 星数大于3000的镜像

docker pull java:8
#下载指定版本java 8

docker run --name thinkphp-rce -p 80:80 -d fb27a6c12de6
#创建docker  -d 镜像ID --name 指定容器名称  -p端口  80：80  前面80是本地主机  后面是docker

docker run --name thinkphp-rce -p 80:80 -p 3306:3306 -p 1000-2000:1000-2000  -d fb27a6c12de6
#映射多个端口


#mysql启动
docker run -p 3306:3306 --name mysql8 -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.26

docker exec -i -t web(容器名称) bash(命令终端)
#进入容器内部

exit
#退出容器

#删除容器
docker start 容器id          #启动容器
docker restart 容器id        #重启容器
docker stop 容器id           #停止当前运行的容器
docker kill 容器id           #强制停止当前容器

docker top web
#查看容器里的进程

docker rm web
#删除容器

docker rmi imageID
#删除镜像

docker rmi -f imageID
#删除运行中的镜像  -f 强制删除

docker container logs web
#查看容器日志

#日志查看
docker logs -tf 容器id
docker logs --tail number 容器id #num为要显示的日志条数

docker inspect web
#查看web这个容器的更多信息

#Dockerfile  文件
FROM webNginx #从本地镜像仓库中拉取nginx  已经存在的镜像
RUN echo "..123.." > /usr/share/nginx/index.html

var/lib/docker/overlay2/678........./diff/usr/share/nginx/index.html
#docker容器 服务器根目录

--------------------------------------------------------------------------------

docker-compose 部署和管理多容器的应用程序


#下载靶场
git clone https://github.com/vulhub/vulhub.git

#看看都有哪些靶场
ls vulhub

#选择一个靶场，比如struts2的系列漏洞
cd vulhub/struts2/s2-057/

#启动靶场
sudo docker-compose up -d

#关闭靶场
sudo docker-compose down

#清理环境
sudo docker rm $(docker ps -a -q)

————————————————


