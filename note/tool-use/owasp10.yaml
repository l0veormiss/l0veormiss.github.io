>1. 注入
漏洞原理:
	用户提供的数据没有经过应用程序的验证、过滤或净化。
	动态查询语句或非参数化的调用，在没有上下文感知转义的情况 下，被用于解释器。
	在ORM搜索参数中使用了恶意数据，这样搜索就获得包含敏感 或未授权的数据。
	恶意数据直接被使用或连接，诸如SQL语句或命令在动态查询语 句、命令或存储过程中包含结构和恶意数据
防御措施:
	使用安全的API，完全避免使用解释器，或提供参数化界面的接口。
	使用白名单或者进行恰当规范化的输入同样会有助于防止注入攻击，但这不是一个完整的防御，
	因为许多应用程序在输入中需要特殊字符，例如文本区域。
	转义所有特殊字符。
	在查询中使用LIMIT语句或其他SQL控件，以防止在SQL注入时大量地泄露数据。


>2. 失效的身份认证
漏洞原理:
	允许暴力破解或其他自动攻击。
	允许默认的、弱的或大众的密码，例如“Password1”或 “admin/admin”。
	使用弱的或失效的验证凭证，忘记密码等功能。
	使用明文、加密或弱散列密码
	缺少或使用无效的多因素身份验证。
	在URL中暴露会话ID。
	在成功登录后不会更新会话ID。
	未及时销毁会话ID。当用户不活跃的时候，用户会话或认证 令牌（特别是单点登录（SSO）令牌）没有及时注销或失效。
防御措施:
	使用多因素身份验证，以防止自动、凭证填充、 暴力破解和被盗凭据再利用攻击。
	不要使用默认密码。
	检查弱密码
	设置密码长度以及复杂度
	确保注册、凭据恢复和API的强度用以抵御账户枚举攻击。
	限制登陆失败的次数。记录所有失败信息并在凭据填充、暴力破解或其他攻击被检测到时及时报警。
	使用服务器端安全的内置会话管理器，在登录后生成高度复杂的新随机会话ID。会话ID不能在URL中，并且及时销毁。


>3. 敏感数据泄露
漏洞原理:
	数据进行明文传输。
	数据进行存储时未进行加密。
	使用弱密码算法。
	是否使用默认加密密钥，生成或重复使用弱密钥。
	是否强制加密敏感数据等安全措施。
	用户终端未验证接收到的服务器凭据是否有效。
防御措施:
	对系统处理、存储或传输的数据分类，并根据分类进行访问控制。
	根据数据的分类保护敏感数据。
	对于没必要存放的、重要的敏感数据，应当尽快清除。
	确保存储的所有敏感数据被加密。
	确保使用了最新的、强大的标准算法或密码、参数、协议和密匙， 并且合适的管理密钥。
	确保传输过程中的数据被加密。
	禁止缓存包含敏感数据的响应。
	使用强算法、加盐的哈希算法存储密码。
	单独验证配置的有效性。


>4. XML（外部实体）XXE
漏洞原理:
	应用接受XML或XML上传，或向XML中插入了不可信数据。
	XML解析器或基于SOAP的服务器启用了DTD(Document Type Definition,文档类型定义)。
	SAML（安全断言标记语言，基于XML的身份验证）被用于实体处理。
	使用1.2版本之前的SOAP，它可能易受XXE攻击，如果XLM被直接传给SOAP的话。
	易受XXE攻击的服务器会受到billion laughs attack之类的DoS攻击。

防御措施:
	只要有可能，使用JSON之类的简单数据格式，不序列化敏感数据。
	及时打补丁，升级XML解释器以及使用的库。使用Dependency-check之类的工具。升级SOAP到1.2及更高
	在解析器中禁用XML外部实体和DTD。
	使用服务端输入白名单，过滤，格式化来避免XML文件中的恶意数据。
	验证XML和XSL文件上传功能中是否使用XSD（XML Schema Definition）及类似的验证功能。
	使用工具帮助检测源码中的XXE。
	使用虚拟补丁，API安全网关，WAF等手段。


>5. 失效的访问控制
漏洞原理:
	通过修改 URL、内部应用程序状态或 HTML 页面绕过访问控制 检查，或简单地使用自定义的 API 攻击工具。
	允许查看或编辑他人的帐户。
	提权。以用户身份登录时充当管理员。
	元数据操作，如重放或篡改 JWT 访问控制令牌，或作以提升权限的cookie 或隐藏字段。
	CORS(Cross-Origin Resource Sharing)配置错误允许未授权的API访问。
	在未通过身份验证的用户强制浏览的通过身份验证时才能看到的页面、或作为标准用户访问才具有相关权限的页面，API未进行访问控制。

防御措施:
	除公有资源外，默认情况下拒绝访问。
	使用一次性的访问控制机制，并在整个应用程序中不断重用它们， 包括最小化CORS使用。
	建立访问控制模型以强制执行所有权记录，而不是接受用户创建、 读取、更新或删除的任何记录。
	域访问控制对每个应用程序都是唯一的，但业务限制要求应由域模型强制执行。
	禁用 Web服务器目录列表，并确保文件元数据（如:git）不存在于 Web的根目录中。
	记录失败的访问控制，并及时向管理员告警（如:重复故障）。
	对API和控制器的访问进行速率限制，以最大限度地降低自动化攻击工具的危害。
	当用户注销后，服务器上的JWT token令牌应立即失效。


>6. 安全配置错误
漏洞原理:
	应用栈堆的任何部分都缺少适当的安全加固，或者云服务的权限配置错误。
	应用程序启用或安装了不必要的功能（例如:不必要的端口、服 务、网页、帐户或权限）。
	默认帐户的密码仍然可用且没有更改。
	错误处理机制向用户披露堆栈跟踪或其他大量错误信息。
	对于更新的系统，禁用或不安全地配置最新的安全功能。
	应用程序服务器、应用程序框架（如:Struts、Spring、 ASP.NET）、库文件、数据库等没有进行安全配置。
	服务器不发送安全标头或指令，或者未对服务器进行安全配置。
	软件未及时更新，易受攻击。
防御措施:
	可重复的加固程序，能够更快，更容易地部署环境。确保开发，QA,生产环境配置完全相同，
	但使用不同的凭据。这个程序应该自动化，以最小化安装安全环境地代价。
	搭建最小化平台，该平台不包含任何不必要的功能、组件、文档和示例。
	包管理工具中检查并更新安全配置
	一个能在组件和用户间提供有效的分离和安全性的分段应用程序架构。
	向客户端发送安全指令，如:安全标头。
	使用自动化进程以验证所有环境中配置的有效性。


>7. 跨站脚本攻击（XSS）
漏洞原理:
	反射式XSS:
	​ 应用程序或API包括未经验证和未经转义的用户输入， 作为HTML输出的一部分。一个成功的攻击可以让攻击者在受害者 
	的浏览器中执行任意的HTML和JavaScript。 通常，用户需要与指 向攻击者控制页面的某些恶意链接进行交互，
	例如恶意漏洞网站， 广告或类似内容。
	存储式XSS:
	​ 应用或者API将未过滤的用户的输入存储下来了， 并在后期在其他用户或者管理员的页面展示出来。 
	存储型XSS一般被认为是高危或严重的风险。
	DOM型XSS:
	​ 会动态的将攻击者可控的内容加入页面的JavaScript框架、单页面程序或API存在这种类型的漏洞。
	应该避免将攻击者可控的数据发送给不安全的JavaScript API。
防御措施:
	使用自动转义XSS的框架，比如React JS。学习每种框架的XSS保护，并手动处理用例没有覆盖到的部分。
	转义不可信的HTTP请求数据能够解决反射型和存储型XSS威胁。
	在客户端修改浏览器文档时应用内容敏感的编码以抵御DOM XSS或使用相似的内容敏感转义技术。
	启用CSP(Content Security Policy),这是一种对抗XSS的纵深防御弥补控制。


>8. 反序列化
漏洞原理:
	对象和数据结构相关攻击:当存在类能够在反序列化过程中或是之后改变应用表现，攻击者就能通过这个类修改应用逻辑，
	或实现任意远程代码执行。
	典型数据篡改攻击:如访问控制相关攻击，当数据结构存在而内容又能被修改。
防御措施:
	对任何序列化对象进行完整性检测，比如数字签名以防止数据篡改或恶意对象。
	在反序列化过程中强制严格的类型限制。
	在低权限环境中独立运行反序列化代码
	记录反序列化异常和错误，比如收到的类型并不是期望的类型。
	限制或监管传入和传出来自反序列化的容器或服务器的网络链接
	监管反序列化，当用户一直反序列化时及时报警。	


>9. 组件漏洞
漏洞原理:
	管理员不知道使用的所有组件的版本，包括直接使用的和嵌套的。
	软件易受攻击，不再支持，或是过时了。包括OS, web服务器，DBMS，APIs和所有组件，运行时环境，库。
	没有周期性扫描漏洞，没有关注所使用组件的安全公告。
	没有及时修复或升级平台，框架，依赖。
	软件开发者没有测试升级，更新，补丁的兼容性。
防御措施:
	移除不使用的依赖、不需要的功能、组件、文件和文档。
	持续的记录客户端和服务器端以及它们的依赖库的版本信息。持续监控如CVE 和 NVD等是否发布已使用组件的漏洞信息，
	可以使用软 件分析工具来自动完成此功能。订阅关于使用组件安全漏洞的警告邮件。
	仅从官方渠道安全的获取组件，并使用签名机制来降低组件被篡改或加入恶意漏洞的风险
	关注那些不再维护或者不发布安全补丁的库和组件。如果不能打补丁，可以考虑部署虚拟补丁来监控、检测或保护。


>10. 日志记录缺失
漏洞原理:
	可审计性事件，如:登录、登录失败和高额交易未被记录。
	告警和错误事件未能产生足够的、清晰的的日志信息。
	应用和API关于可疑活动的日志没有被监管。
	日志信息只在本地存储。
	没有定义合理的告警阈值和制定响应处理流程。
	渗透测试和使用DAST工具（如:OWASP ZAP）扫描没有触发告警
	对于实时或准实时的攻击，应用程序无法及时检测、处理和告警。
防御措施:
	确保登录，访问控制失败，服务断输入验证失败等事件会被日志记录，同时记录足够多的用户上下文以确定可疑账号。
	保存足够长的时间以用于分析。
	确保日志以一定格式生成，便于日志管理。
	确保高额交易有完整性控制的审计信息，以防止篡改或删除， 例如审计信息保存在只能进行记录增加的数据库表中。
	建立有效的监控和告警机制，使可疑活动在可接受的时间内被发现和应对。
	建立或采取一个应急响应机制和恢复计划。


