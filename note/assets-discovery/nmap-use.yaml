扫描的IP:
<ip>,<net/mask>
#直接指定IP地址

-iL <ips_file>
#IP地址列表文件

-iR <number>
#随机IP数量，可以使用 --exclude <Ips> 或 --excludefile <file> 排除可能的IP。


设备发现:
# 默认情况下，Nmap启动一个发现阶段，包括：-PA80 -PS443 -PE -PP
-sL 
# 非侵入式，通过发出DNS请求来列出目标。用于判断例如 www.prueba.es/24 所有IP是否为我们的目标。

-Pn
# 无ping。如果你知道所有IP都是活动的（否则可能会浪费很多时间），可以使用此选项来阻止发现阶段。但是这
#   个选项也可能产生虚假的负面结果，即将活动的IP标记为不活动。

-sn
# 无端口扫描。在完成侦察阶段后，不扫描端口。相对隐蔽，允许对小型网络进行扫描。使用特权时，发送一
#   个ACK(-PA)到80端口，发送一个SYN(-PS)到443端口，发送一个回显请求和一个时间戳请求，无特权时总是完
#   成连接。如果目标是网络，则只使用ARP(-PR)。如果与其他选项一起使用，则只丢弃其他选项的数据包。

-PR
# ARP Ping。默认情况下，用于分析我们网络中的计算机，比使用ping更快。如果不想使用ARP数据包，可
#   以使用--send-ip。

-PS <ports>
# 发送SYN数据包，如果回复SYN/ACK则表示端口开放（回复RST以避免结束连接），如果回复RST
#   则表示端口关闭，如果没有回复则表示不可达。如果没有特权，将自动使用完全连接。如果没有指定端口，则默
#   认使用80端口。

-PA <ports>
# 类似于上一个选项，但使用ACK。两者结合使用可以得到更好的结果。

-PU <ports>
# 目标是相反的，发送到预期关闭的端口。某些防火墙只检查TCP连接。如果端口关闭，则回复端口不可
#   达；如果回复其他ICMP消息或者没有回复，则视为目标不可达。

-PE, -PP, -PM 
# ICMP PING：回显回复、时间戳和地址掩码。用于判断目标是否活动。

-PY<ports>
# 默认发送SCTP INIT探测到80端口，可以回复INIT-ACK（开放）、ABORT（关闭）或者没有回复或
#   者ICMP不可达（不活动）。

-PO <protocols>
# 在头部指定协议，默认为1（ICMP）、2（IGMP）和4（Encap IP）。对于ICMP、IGMP、
#   TCP（6）和UDP（17）协议，发送协议头部，对于其他协议，只发送IP头部。目的是通过对头部的畸形处理，
#   回复协议不可达或者相同协议的响应，以判断目标是否活动。

-n
# 不使用DNS

-R
# 总是使用DNS


端口扫描技术:
-sS
#不完成连接，因此不留下痕迹，如果可以使用则非常好（特权）。默认情况下使用此选项。

-sT
#完成连接，因此会留下痕迹，但可以确保使用。默认情况下无特权。

-sU
# 较慢，用于UDP。主要用于：DNS（53）、SNMP（161,162）、DHCP（67和68），(-sU53,161,162,67,68)：
#   开放（回复）、关闭（端口不可达）、过滤（其他ICMP），开放/过滤（无回复）。对于开放/过滤状态，使用-sV
#   发送大量请求以检测nmap支持的任何版本，并可以检测到真实状态。这会大大增加时间。

-sY
# SCTP协议无法建立连接，因此没有日志，与-PY类似。

-sN,-sX,-sF
# Null、Fin、Xmas可以穿透一些防火墙并提取信息。它们基于符合标准的机器应该对没有SYN、RST
#   或ACK标志的请求回复RST：开放/过滤（无回复）、关闭（RST）、过滤（ICMP不可达）。在Windows、CIsco、BSDI
#   和OS/400上不可靠，在Unix上可靠。

-sM
# Maimon扫描：发送FIN和ACK标志，用于BSD，目前将所有端口都返回为关闭状态。

-sA, sW
# ACK和Window，用于检测防火墙，以判断端口是否被过滤。-sW可以区分开放/关闭状态，因为开放状态会回复
#   不同的窗口值：开放（RST窗口不为0）、关闭（RST窗口=0）、过滤（ICMP不可达或无回复）。并非所有计算机
#   都按此方式工作，因此如果全部关闭，则不起作用；如果有一些开放，则工作正常；如果有很多开放和很少关闭
#   ，则工作方式相反。

-sI
# 空闲扫描。对于存在主动防火墙但我们知道它不会过滤特定IP的情况（或者我们只是想要匿名），我们可以使用
#   僵尸扫描器（适用于所有端口），使用脚本ipidseq或exploit auxiliary/scanner/ip/ipidseq来查找可能的
#   僵尸。此扫描器基于IP数据包的IPID编号。

--badsum
#发送错误的校验和，计算机会丢弃数据包，但防火墙可能会回复一些内容，用于检测防火墙。

-sZ 
# "奇怪"的SCTP扫描器，通过发送带有cookie echo片段的探测包，如果开放则应该被丢弃，如果关闭则应
#   该回复ABORT。可以通过无法通过的init的防火墙，但不好的是它无法区分过滤和开放。

-sO
# 协议IP扫描。发送错误和空的头部，有时甚至无法区分协议。如果收到ICMP不可达协议，则表示关闭；如果收
#       到不可达端口，则表示开放；如果收到其他错误，则表示过滤；如果没有收到任何回复，则表示开放|过滤。

-b <server> 
# FTPhost--> 用于从另一台主机扫描主机，通过连接另一台机器的FTP，并要求它向另一台机器的
#       端口发送文件，根据回复的内容，我们将知道它们是否开放。[<user>:<password>@]<server>[:<port>] 
#       几乎所有的FTP服务器都不再允许这样做，因此实际用途很小。


网络扫描的常用方法和资源:
-p
# 用于指定要扫描的端口。要选择所有的65335个端口：-p- 或 -p all。Nmap根据其受欢迎程度进行内部
#       分类。默认情况下，它使用前1000个常用端口。使用**-F**（快速扫描）可以扫描前100个常用端口。
#       使用**--top-ports <number>可以扫描指定数量的常用端口（从1到65335）。为了避免按顺序检查端口
#       ，可以使用-r选项。还可以选择特定的端口范围：20-30,80,443,1024-。最后一种情况表示从1024开始的
#       所有端口。还可以按协议分组端口：U:53,T:21-25,80,139,S:9。还可以选择nmap中常用端口范围内的一
#       个范围：-p [-1024]，它会扫描nmap-services中包含的端口中的1024个端口。--port-ratio
#        <ratio>**会扫描最常用的端口，比例必须介于0和1之间。

-sV  
#版本扫描，可以调整强度从0到9，默认为7。

--version-intensity <number> 
#调整强度，较低的强度只会发送最可能的探测请求，而不是全部。这样可以大大缩短UDP扫描时间。

-O  
#操作系统检测。

--osscan-limit 
#为了对主机进行良好的扫描，至少需要一个开放的端口和一个关闭的端口。如果不满足这个条
      #件并且设置了此选项，则不会尝试进行操作系统预测（节省时间）。

--osscan-guess  
#当操作系统检测不完美时，可以使用此选项来增加检测的准确性。


脚本使用:
--script <filename>|<category>|<directory>|<expression>[,...]
# 要使用默认脚本，只需使用
-sC或--script=default

# 可用的类型有：
auth、broadcast、default、discovery、dos、exploit、external、fuzzer、intrusive、
malware、safe、version和vuln。
    # Auth： 执行所有可用于身份验证的脚本。
    # Default： 执行工具的默认基本脚本。
    # Discovery： 检索目标或受害者的信息。
    # External： 使用外部资源的脚本。
    # Intrusive： 使用对受害者或目标来说是侵入性的脚本。
    # Malware： 检查是否存在由恶意代码或后门打开的连接。
    # Safe： 执行非侵入性的脚本。
    # Vuln： 发现最常见的漏洞。
    # All： 执行所有可用的NSE扩展脚本。

# 要搜索脚本：
nmap --script-help="http-*" -> 以http-开头的脚本

nmap --script-help="not intrusive" -> 除了这些之外的所有脚本

nmap --script-help="default or safe" -> 在一个或两个类别中的脚本

nmap --script-help="default and safe" --> 同时在两个类别中的脚本

nmap --script-help="(default or safe or intrusive) and not http-*"

      --script-args <n1>=<v1>,<n2>={<n3>=<v3>},<n4>={<v4>,<v5>}

      --script-args-file <filename>

      --script-help <filename>|<category>|<directory>|<expression>|all[,...]

      --script-trace ---> 提供脚本的详细信息

      --script-updatedb

# 要使用脚本，只需输入：
nmap --script <script_name> <target> --> 
# 输入脚本名称将同时执行脚本和扫描器，因此也可以添加扫描器选项，例如可以添加**“safe=1”**以仅执行安全脚本。


时间控制:
#Nmap可以使用秒、分钟、毫秒来调整时间： 
--host-timeout arguments 900000ms, 900, 900s, and 15m all do the same thing.

# Nmap将要扫描的主机数量分成组，并以块的形式分析这些组，直到所有组都被分析完毕才会进入下一组
# （用户在分析完毕之前也不会收到任何更新）。这样，对于Nmap来说，使用较大的组更加高效。默认情况下，
# 对于C类网络，使用256个主机。

# 可以使用**（调整并行扫描组的大小）来更改。
--min-hostgroup** <numhosts> 和 --max-hostgroup <numhosts>

# 可以控制并行扫描器的数量，但最好不要这样做（nmap已经根据网络状态自动进行了控制）：
--min-parallelism <numprobes> 和 --max-parallelism <numprobes>

#可以调整RTT超时时间，但通常不需要：
--min-rtt-timeout <time>，--max-rtt-timeout <time>，--initial-rtt-timeout <time>

#可以调整尝试次数：
--max-retries <numtries>

#可以调整主机扫描超时时间：
--host-timeout <time>

#可以调整每个测试之间的延迟时间，以便慢慢进行：
--scan-delay <time>，--max-scan-delay <time>

#可以调整每秒发送的数据包数量：
--min-rate <number>，--max-rate <number>

#许多端口在被过滤或关闭时响应时间很长，如果只关注打开的端口，可以使用：
--defeat-rst-ratelimit


要定义Nmap的侵入程度:
#-T paranoid|sneaky|polite|normal|aggressive|insane

-T (0-1)

-T0 --> 一次只扫描一个端口，等待5分钟才进行下一个扫描

-T1和T2 --> 非常相似，但分别等待15秒和0.4秒进行下一次测试

-T3 --> 默认行为，包括并行操作

-T4 --> --max-rtt-timeout 1250ms --min-rtt-timeout 100ms --initial-rtt-timeout 500ms --max-retries 6 --max-scan-delay 10ms

-T5 --> --max-rtt-timeout 300ms --min-rtt-timeout 50ms --initial-rtt-timeout 250ms --max-retries 2 --host-timeout 15m --max-scan-delay 5ms


防火墙/IDS:
# 防火墙和入侵检测系统（IDS）会阻止端口访问并分析数据包。 -f 用于分片数据包，默认在头部之后将其分片为8字节，
# 要指定大小，请使用..mtu（不要使用-f），偏移量必须是8的倍数。版本扫描器和脚本不支持分片。

-D decoy1,decoy2,ME 
#  Nmap发送扫描器，但使用其他IP地址作为源地址，以隐藏您的身份。如果在列表
#       中放置ME，Nmap将将您放在那里，最好在您之前放置5或6个以完全掩盖您的身份。可以使用RND:<number>生成
#       随机IP地址，以生成<number>个随机IP地址。它们不适用于无TCP连接的版本检测。如果您在网络内部，最好
#       使用活动的IP地址，否则很容易发现您是唯一的活动IP地址。
# 使用随机IP地址：nmap 
-D RND:10 Target_IP

-S IP 
#当Nmap无法获取您的IP地址时，您需要使用此选项提供IP地址。它还可以让其他目标认为有另一个目标
#       正在扫描它们。

-e <interface> 选择接口
#       许多管理员会打开入站端口，以确保一切正常运行，并且他们更容易找到其他解决方案。这些可能是DNS端口
#       或FTP端口...为了查找此漏洞，Nmap提供了以下选项：
--source-port <portnumber>;-g <portnumber> 等效

--data <hex string> 
#用于发送十六进制文本：
--data 0xdeadbeef 和 --data \xCA\xFE\x09

--data-string <string> 
#用于发送普通文本：
--data-string "Scan conducted by Security Ops, extension 7192"

--data-length <number> 
#Nmap仅发送头部，使用此选项可以使其添加更多字节（将随机生成）
# 要完全配置IP数据包，请使用**--ip-options**
# 如果要查看发送和接收的数据包中的选项，请指定--packet-trace。有关使用Nmap的IP选项的更多信息和示例，请参阅
http://seclists.org/nmap-dev/2006/q3/52

--ttl <value>

--randomize-hosts 
#使攻击不那么明显

--spoof-mac <MAC address, prefix, or vendor name> 
# 更改MAC地址的选项，例如：
Apple、0、01:02:03:04:05:06、deadbeefcafe、0020F2和Cisco

--proxies <Comma-separated list of proxy URLs> 
#用于使用代理，有时代理无法保持与Nmap所需的连接数一样多，因此需要调整并行性：
--max-parallelism

-sP 
#使用ARP发现网络中的主机

# 许多管理员在防火墙中创建了一个允许通过特定端口（如20、53和67）的所有数据包的规则，我们可以告诉Nmap从这
# 些端口发送我们的数据包：
nmap --source-port 53 IP


输出:
-oN file    #普通输出
-oX file    #XML输出
-oS file    #脚本输出
-oG file    #grepable输出
-oA file    #除了-oS之外的所有输出
-v level    #详细程度
-d level    #调试级别
--reason    #主机和状态的原因
--stats-every time    #每隔一段时间显示进度
--packet-trace   #查看发送的数据包，可以指定过滤器，如：--version-trace或--script-trace
--open  #显示开放、开放|过滤和未过滤的端口
--resume file   #生成摘要


其他:
-6  #启用IPv6
-A  #等同于 -O -sV -sC --traceroute


运行时:
#在Nmap运行时，可以更改选项：
v / V  #增加/减少详细程度
d / D  #增加/减少调试级别
p / P  #打开/关闭数据包跟踪
?      #打印运行时交互帮助屏幕


Vulscan:
#Nmap脚本，用于查看从离线数据库（从其他重要数据库下载）获取的服务版本，并返回可能的漏洞。

#使用的数据库有：
    Scipvuldb.csv | http://www.scip.ch/en/?vuldb
    Cve.csv | http://cve.mitre.org
    Osvdb.csv | http://www.osvdb.org
    Securityfocus.csv | http://www.securityfocus.com/bid/
    Securitytracker.csv | http://www.securitytracker.com
    Xforce.csv | http://xforce.iss.net
    Exploitdb.csv | http://www.exploit-db.com
    Openvas.csv | http://www.openvas.org

#要下载并安装到Nmap文件夹中：
wget http://www.computec.ch/projekte/vulscan/download/nmap_nse_vulscan-2.0.tar.gz && tar 
-czvf nmap_nse_vulscan-2.0.tar.gz vulscan/ && sudo cp -r vulscan/ /usr/share/nmap/scripts/

#还需要下载数据库文件并将其添加到/usr/share/nmap/scripts/vulscan/中。用法：

#使用所有数据库：
sudo nmap -sV --script=vulscan TARGET_HOST

#使用特定数据库：
sudo nmap -sV --script=vulscan --script-args vulscandb=cve.csv TARGET_HOST


加速Nmap服务扫描 x16:
# 根据这篇文章，你可以通过修改 /usr/share/nmap/nmap-service-probes 中的所有
#  totalwaitms 值为 300，以及将 tcpwrappedms 修改为 200，来加速 nmap 服务分析。

# 此外，那些没有明确定义 servicewaitms 的探测器将使用默认值 5000。因此，我们可以为每个探测器添
# 加值，或者我们可以自己编译 nmap 并在 service_scan.h 中更改默认值。

# 如果你不想在 /usr/share/nmap/nmap-service-probes 文件中修改 totalwaitms 和 
# tcpwrappedms 的值，你可以编辑 解析代码，使得 nmap-service-probes 文件中的这些值完全被忽略。










