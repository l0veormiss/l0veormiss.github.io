gobuster:
dir  传统的目录爆破模式；
dns  DNS子域名爆破模式；
vhost  虚拟主机爆破模式；
-u	--url 网站的域名或者IP
-w	用户自定义字典
-x	自定义文件类型
-c  使用cooike
-t  线程数量
#示例：
gobuster dir -u http://192.168.1.4/
gobuster dir -u http://192.168.1.4/ -w /usr/share/dict.txt -x .php
gobuster dir -u http://192.168.1.4/ -w /usr/share/dict.txt -c 'session=123456' -t 50 -x .php

gobuster dns -d mysite.com -t 50 -w common-names.txt
# Found: cse.google.com
# Found: news.google.com
# Found: music.google.com

gobuster vhost -u https://mysite.com -w common-vhosts.txt
# Found: www.mysite.com
# Found: piwik.mysite.com
# Found: mail.mysite.com

dirb:
-a  UA请求头自定义
-c  使用cooike
-p  使用代理
-o  输出到文件
-X  字典的每行数据后面，设置附加后缀
-z  设置延迟，单位毫秒1000
-t  设置线程


#示例：
dirb http://192.168.1.4/ 
dirb http://192.168.1.4/ /usr/share/dict.txt
dirb http://192.168.1.4/ /usr/share/dict.txt -a 'UA头' -c 'session=123456'
dirb http://192.168.1.4/ /usr/share/dict.txt -p 192.168.1.22:4444 -o result.txt
dirb http://192.168.1.4/ /usr/share/dict.txt -X .bak # /login.php.bak,方便扫描备份文件的时候使用

dirsearch:
-u	--url 网站域名或IP
-w	用户自定义字典
-e	文件后缀
-r  递归扫描
-t  指定线程数量
-f  设置附加后缀
--exclude-status  排除指定的返回状态

#示例：
dirsearch -u http://192.168.1.4/ -w /usr/share/dict.txt --exclude-status 401,403 -f -e php,html,txt
python3 dirsearch.py -e php,txt,zip -u https://target
python3 dirsearch.py -e php,txt,zip -u https://target -w db/dicc.txt
python3 dirsearch.py -e php,txt,zip -u https://target -w db/dicc.txt --recursive -R 2
python3 dirsearch.py -e php,txt,zip -u https://target -w db/dicc.txt --recursive -R 4 --scan-subdirs=/,/wp-content/,/wp-admin/
python3 dirsearch.py -e php,txt,zip -u https://target -w db/dicc.txt --exclude-texts=This,AndThat
python3 dirsearch.py -e php,txt,zip -u https://target -w db/dicc.txt -H "User-Agent"
python3 dirsearch.py -e php,txt,zip -u https://target -w db/dicc.txt -t 20
python3 dirsearch.py -e php,txt,zip -u https://target -w db/dicc.txt --random-agents
python3 dirsearch.py -e php,txt,zip -u https://target -w db/dicc.txt --json-report=reports/target.json
python3 dirsearch.py -e php,txt,zip -u https://target -w db/dicc.txt --simple-report=reports/target-paths.txt
python3 dirsearch.py -e php,txt,zip -u https://target -w db/dicc.txt --plain-text-report=reports/target-paths-and-status.json


wfuzz:
-u	    网站的域名或IP
-w	    用户自定义单词表
-c      带颜色显示
-s      设置间隔时间
-d      设定POST数据 #“uname=admin&passwd=admin”
-b      设置cooike #“cookie=”
-H      设置UA请求头 #“User-Agent: firfox”
-R 1    递归目录，深度为1，在存在的目录下再递归扫描一次

--sc 405    只显示405的状态码
--hc 404    隐藏状态码为404
--hl 20     隐藏响应信息行数为20行的
--hw 30     隐藏响应信息中字数为30的
--hh 0      隐藏响应信息中字符数为0的，比如过滤响应为空的     

-z      设置payload
-z file,dict.txt    以文件形式导入
-z range,1-100      以范围形式导入，1-100
-z list,1-2-3-10    以列表形式导入 

payloads    为wfuzz生成的用于测试的特定字符串 #wfuzz -e payloads
encoders    将payload进行编码或加密
iterators   提供了针对多个payload的处理方式
printers    用于控制输出打印

#示例：
# 测试URL中的参数
wfuzz -z range,0-100 --hl 106 http://192.168.0.102/Home/Run/tui.html?uid=FUZZ 

# POST请求测试
wfuzz -w userList -w pwdList -d "username=FUZZ&password=FUZ2Z" http://127.0.0.1/login.php

wfuzz -u http://192.168.1.4/ -w /usr/share/dict.txt --hc 400,403,404
wfuzz -w dict/filename.txt 192.168.1.1/test/FUZZ.php
wfuzz -w dict/params.txt 192.168.1.1/test/test.php?name=FUZZ
wfuzz -w dict/params.txt -w dict/123.txt IP/test.php?FUZZ=FUZ2Z #FUZ2Z，FUZ3Z 表示多个测试位置
wfuzz -w list.txt --hc 302 https://www.baidu.com/FUZZ #隐藏302的请求
wfuzz -w list.txt --hl  17  https://www.baidu.com/FUZZ #隐藏返回长度为17的请求
wfuzz -w list.txt --sc 200 https://www.baidu.com/FUZZ #显示200的请求

wfuzz -u 'http://192.168.56.102/f66b22bf020334b04c7d0d3eb5010391.php
?FUZZ=../../../../../etc/passwd' -w ./big.txt  -c --hh 0


hydra:
-l  login 小写，指定用户名进行破解
-L  file 大写，指定用户的用户名字典
-p  pass 小写，用于指定密码破解，很少使用，一般采用密码字典。
-P  file 大写，用于指定密码字典。
-e  ns 额外的选项，n：空密码试探，s：使用指定账户和密码试探
-M  file 指定目标ip列表文件，批量破解。
-o  file 指定结果输出文件
-f  找到第一对登录名或者密码的时候中止破解。
-t  tasks 同时运行的线程数，默认是16
-w  time 设置最大超时时间，单位
-v / -V  显示详细过程
-R  恢复爆破（如果破解中断了，下次执行 hydra -R /path/to/hydra.restore 就可以继续任务。）
-x  自定义密码。

service：指定服务名，支持的服务跟协议有：telnet，ftp，pop3等等。
注意：
1.自己创建字典,然后放在当前的目录下或者指定目录。
2.参数可以统一放在最后，格式比如hydra ip 服务 参数。
3.如果能确定用户名一项时候，比如web登录破解，直接用 -l就可以，然后剩余时间破解密码。
4.缺点，如果目标网站登录时候需要验证码就无法破解。
5.man hydra最万能。
6.或者hydra -U http-form等查看体帮助

#示例 SSH：
Hydra 参数 IP 服务
hydra -L user.txt -P password.txt -vV -e ns 192.168.154.131 ssh

#示例 FTP：
hydra -L 用户名字典 -P 密码字典 -t 5 -e ns IP地址 -v ftp

#示例 HTTPS：
hydra -m /index.php -l 用户名 -P 密码字典.txt IP地址 https

#示例 路由器：
hydra -l admin -x 6:10:1a.~!@#$%^&()-= -t 8 192.168.1.1 http-get /
# -l admin 为尝试破解的用户名。
# -x 6:10:1a. 表示枚举的密码由 数字、小写字母和单字符’.'等等组成，长度为 6 - 10 位。
# -t 8 表示分 8 个并行任务进行爆破尝试。192.168.1.1 为 Router 地址。http-get 为破解方式（协议）

#示例 http-proxy：
hydra -l admin -P 字典.txt http-proxy://IP地址

#示例 SMB：
hydra -l 用户名字典 -P 密码字典 IP地址 smb

#示例 windows远程桌面 RDP：
hydra ip地址 rdp -l administrator -P 密码字典.txt -V

#示例 邮箱pop3：
hydra -l 用户名 -P 密码字典.txt my.pop3.mail pop3

#示例 telnet：
hydra ip地址 telnet -l 用户字典.txt -P 密码字典.txt -t 32 -s 23 -e ns -f -V

#示例 cisco：
hydra -P 密码字典 IP地址 cisco
hydra -m cloud -P 密码字典 IP地址 cisco-enable



kali自带字典 wordlists:
big.txt #大的字典
small.txt #小的字典
catala.txt #项目配置字典
common.txt #公共字典
euskera.txt #数据目录字典
extensions_common.txt #常用文件扩展名字典
indexes.txt #首页字典
mutations_common.txt #备份扩展名
spanish.txt #方法名或库目录
others #扩展目录，默认用户名等
stress #压力测试
vulns #漏洞测试


