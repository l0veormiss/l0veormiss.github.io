iptables linux:

端口转发条件 必须 必须 必须:
1. 开启系统内核转发功能:
vim /etc/sysctl.conf
删除 #net.ipv4.ip_forward=1 前的#号 开启ipv4 forward
sudo sysctl -p 
# 若运行后显示 net.ipv4.ip_forward = 1 表示修改生效了
2.开启系统nat模块:
iptables -t nat -A POSTROUTING -j MASQUERADE
#可以开始端口转发了  验证成功

注意事项:
    1、默认iptables设置的防火墙规则会立即生效 但重启后无效
    2、配置永久规则需要安装iptables-services软件包 并设置开机自启
    3、通过iptables-save > /etc/sysconfig/iptables命令 将规则永久保存到文件

iptables 四表五链:
# 4个表:filter,nat,mangle,raw 默认表是filter（没有指定表的时候就是filter表）。 
#表的处理优先级：raw>mangle>nat>filter。 
   filter   一般的过滤功能 
   nat      用于nat功能 端口映射 地址映射等 
   mangle   用于对特定数据包的修改 
   raw      优限级最高 设置raw时一般是为了不再让iptables做数据包的链接跟踪处理  提高性能
# 5个链：PREROUTING,INPUT,FORWARD,OUTPUT,POSTROUTING。
   INPUT    通过路由表后目的地为本机 
   OUTPUT   由本机产生 向外转发 
   POSTROUTIONG     发送到网卡接口之前。

规则说明:
# 端口转发功能主要是用nat表中的三个链实现该功能：
    -t 指定配置表
    -A 链中添加规则
    -D 删除链中规则
    -C 修改链中规则
    -j target 决定符合条件的包到何处去 target模式很多

#常用参数
    -t  指定表
    -A  指定链
    -I  最上面插入一条规则
    -D  删除某条规则
    -F  清空所有规则
    -L  查看所有规则
    -N  自定义链 可以用在-j的后面
    -P  设定默认策略
    -Z  包字节数清0
    -s  匹配某一个源地址IP
    -d  匹配某一个目的地址IP
    -p  指定协议 tcp udp icmp
    -i  指定进入网卡 如-e eth0
    -o  指定出去接口
    -j  动作 DROP REJECT ACCEPT LOG
    -n  不解析 显示数值
    -v  详细信息输出
    --line-numbers  为每一条规则编号

限制来源IP:
    iptables -t filter -I INPUT -s 159.65.244.144 -j REJECT  #插入一条新的规则 禁止此IP访问

    iptables -t filter -A INPUT -s 192.168.1.0/24 -j REJECT  #禁止此网段访问

    iptables -t filter -A INPUT -j ACCEPT    #添加放行所有输入来源
# 注意：
# 规则链内的匹配顺序：顺序比对 匹配即停止（LOG除外）

查看规则列表:
iptables -t nat -nL --line
# Chain PREROUTING (policy ACCEPT)
# num  target     prot opt source               destination         
# 1    DNAT       tcp  --  0.0.0.0/0            192.168.1.54         tcp dpt:33389 to:10.30.30.128:3389
# Chain INPUT (policy ACCEPT)
# num  target     prot opt source               destination         

iptables -t filter -nL INPUT  #查看规则列表
# Chain INPUT (policy ACCEPT)
# target     prot opt source               destination         
# REJECT     all  --  159.65.244.144       0.0.0.0/0            reject-with icmp-port-unreachable

iptables -t filter -nL INPUT --line-numbers  #查看规则列表并显示序号
# Chain INPUT (policy ACCEPT)
# num  target     prot opt source               destination         
# 1    REJECT     all  --  159.65.244.144       0.0.0.0/0            reject-with icmp-port-unreachable

删除与清空规则:
iptables -t filter -D INPUT 2  #删除序号为2的规则
iptables -t filter -F          #清空filter表规则
iptables -t filter -nL INPUT --line-numbers #查询filter表规则都被清空
# Chain INPUT (policy ACCEPT)
# num  target     prot opt source               destination

根据MAC地址封锁主 针对MAC地址:
# 注意：在填写mac地址的时候要用“冒号:”来间隔 直接复制的mac地址是“横杠-”间隔
iptables -t filter -A INPUT -m mac --mac-source 00:00:00:00:00:00 -j DROP  
# 封锁mac地址 不管IP如何变化也会限制
#  （-m）为扩展匹配规则基本用法：  -m   扩展模块    --扩展条件     条件值


本地 端口转发:
# REDIRECT模式可以将防火墙所在机子内部数据流量包转发到本地的另一个端口 它只能用在nat表的PREROUTING、OUTPUT链  
# 并且通过--to-ports选项来指定转发到本地的那个端口号 例如：--to-ports 8080 当然也可以指定为一个范围 
# 例如：--to-ports 8080-8090

# Case 1：下面我们通过PREROUTING链 将外网访问4444端口的数据流量全部转发到本机22端口(注意：本机访问4444并不进
# 行转发) 这种方法适用于当我们的目标主机不允许外部访问特定的端口时我们可以通过端口转发实现对其访问
iptables -t nat -A PREROUTING -p tcp --dport 4444 -j REDIRECT --to-ports 22
# 之后攻击者远程连接目标主机的4444端口的流量会被转发到22端口 实现对目标主机SSH服务的连接：

# Case 2：我们也可以通过OUTPUT链 将本地访问4444端口的数据流量全部转发到本机22端口
iptables -t nat -A OUTPUT -p tcp --dport 4444 -j REDIRECT --to-ports 22
# 之后再本地访问4444端口 可以成功连接到本地SSH服务：


远程 端口转发:
# DNAT模式是用来做目的网络地址转换 它也可以做某种类型地负载平衡 只能用在nat表的PREROUTING和OUTPUT链 
# 并且通过--to-destination选项指定要写入的IP头的地址 其参数可以是一个IP范围 
# 例如: --to-destination 192.168.10.141-192.168.10.151

# SNAT模式用来做源网络地址转换的 就是重写包的源IP地址 如果直接转发包的话 网络响应包上就不知道往哪儿发送应答
#  所以需要改为防火墙的地址 只能用在nat表的POSTROUTING链 且有一个--to-source选项 它可以是一个单独的地
# 址也可以是一段连续的地址 
# 例如:194.236.50.155-194.236.50.160 在指定-p tcp或-p udp的前提下 可以指定源端口的范围 
# 例如:194.236.50.155:1024-32000

# # 当前场景：
kali      192.168.1.15
ubuntu    192.168.1.54  10.30.30.135  #跳板
win2012   10.30.30.128
# # 场景要求：
# 通过将B主机作为中间媒介 攻击者通过A主机访问B主机的4444端口实现对目标主机C的22号端口的访问

# # 具体实现：
# Step 1：通过PREROUTING链 将kali 访问ubuntu的33389端口  转发到 win2012 3389端口
iptables -t nat -A PREROUTING --dst 192.168.1.54 -p tcp --dport 33389 -j DNAT 
--to-destination 10.30.30.128:3389

# 查看添加的规则
iptables -t nat -nL --line
# Chain PREROUTING (policy ACCEPT)
# num  target     prot opt source               destination         
# 1    DNAT       tcp  --  0.0.0.0/0            192.168.1.54         tcp dpt:33389 to:10.30.30.128:3389

# Chain INPUT (policy ACCEPT)
# num  target     prot opt source               destination         

# Chain OUTPUT (policy ACCEPT)
# num  target     prot opt source               destination         

# Chain POSTROUTING (policy ACCEPT)
# num  target     prot opt source               destination         
# 1    MASQUERADE  all  --  0.0.0.0/0            0.0.0.0/0

#删除规则
iptables -t nat -D PREROUTING 1  #删除nat表 PREROUTING链 序号num=1 的规则

#remmina连接
192.168.1.54:33389

#连接成功













